{
  "name": "ember-tools",
  "version": "0.2.8",
  "bin": {
    "ember": "./bin/ember"
  },
  "dependencies": {
    "sync-prompt": "*",
    "commander": "1.1.1",
    "cli-color": "0.2.1",
    "walk": "2.2.1",
    "handlebars": "1.0.12",
    "fleck": "0.5.1",
    "browserify": "2.x",
    "fs-extra": "0.5.0",
    "glob": "3.2.1",
    "request": "~2.21.0",
    "fsmonitor": "~0.2.2",
    "pathspec": "~0.9.2"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "rimraf": "*",
    "testem": "*"
  },
  "scripts": {
    "test": "mocha --require should --reporter dot --ui bdd --growl $(find test -name \"*.spec.js\")",
    "browser": "./bin/ember create test-app && cd test-app && ../bin/ember build && cd .. && testem ci -f test/testem.json"
  },
  "engines": {
    "node": ">=0.8.16"
  },
  "readme": "Ember Tools\n-----------\n\n[![Build Status](https://travis-ci.org/rpflorence/ember-tools.png)](https://travis-ci.org/rpflorence/ember-tools)\n\n![demo](http://cl.ly/image/2G0x323u150m/ember.gif)\n\n## Installation\n\n`npm install -g ember-tools`\n\nDon't have node or npm? Visit http://nodejs.org.\n\n## Features\n\n- prescribed file organization for sanity\n- scaffolding for learning curve mitigation\n- template precompilation for performance\n- single file application build for convenience\n- generators for faster application development\n- commonjs (node-style) modules\n\n## Version Information\n\n**Current Version: 0.2.8**\n\nPackage versions:\n\n- ember v1.0.0\n- ember-data v0.13\n- handlebars v1.0.0\n- jQuery 1.9.1\n\n## Quickstart\n\n```\nnpm install -g ember-tools\nember create my-app\ncd my-app\nember generate --scaffold person name:string age:number\nember build\nopen index.html\n# visit #/people\n```\n\nThe first place to get started is configuring a route in\n`config/routes.js` and then adding a template for the route.\n\n## Usage\n\nYou can always run `ember --help` or `ember [command] --help` to get\nusage information.\n\n```\n  Usage: ember [command] [options]\n\n  Command-Specific Help\n\n    ember [command] --help\n\n  Commands:\n\n    create [options]       creates a new ember application at [dir]\n    build [options]        compiles templates and builds the app\n    generate [options]     generates application files\n    precompile [options]   precompile templates from src dir to target dir\n    update [version]       Update ember.js from ember's s3 build service to [version].\n             Versions are latest(built from master, bleeding edge) and stable.\n             Default version is stable.\n  Options:\n\n    -h, --help     output usage information\n    -V, --version  output the version number\n```\n\n## Guide\n\n### Creating Stand-Alone Browser Apps\n\nIf you are creating a stand-alone browser application (no server, or\ncommunication is through some api service) then use:\n\n`ember create my-app`\n\n- javascript assets created in `my-app/js`\n- ember commands run from `my-app` root\n\nOr if you already have the `my-app` directory, `cd` into it and call\nember create bare:\n\n`ember create`\n\n- javascript assets created in `./js`\n- ember commands run from `./` root\n\nThere is nothing magical about the `index.html` file. Feel free to\nreplace it with your own (you probably should). Just make sure you\ninclude a script tag pointing to `js/application.js`\n\n### Creating Browser Apps as Part of Express or Rails (etc.)\n\nIf you are creating an ember app as part of a server-side framework like\nexpress or ruby on rails use the `--js-path` option.\n\n```sh\ncd my-server-app\nember create --js-path public/javascripts\n```\n\n- javascript assets created in `my-server-app/public/javascripts`\n- ember commands run from `my-server-app` root\n\nRunning `ember build` will create a file at\n`public/javascripts/application.js`. Require that in your server-app's\ntemplate, no other files are required.\n\n### Building Your App\n\nThe build command pre-compiles all the templates to simple functions,\nassigns all your modules to the `App` object based on their file names,\nand then creates a single, concatenated file to be included in your app.\n\n`ember build`\n\nThis build step makes adding new modules to your app as simple as\ncreating a file with the generate command. It will convert the file path\nto an object, ie: `controllers/recipe -> App.RecipeController`,\n`routes/recipes/index -> App.RecipesIndexRoute`.\n\nTo build when files in your app change, use the `--watch` option:\n\n`ember build -w`\n\nIf you want to inspect the objects being assigned to the `App` object\nyou can build without cleanup using the `--no-cleanup, -c` option and\nthen opening up the `index.js` file it creates:\n\n`ember build -c`\n\nYou can also specify the path of the resulting application file to save\nit somewhere other than the default path.\n\n`ember build --out-file public/whatever.js`\n\nOf course, you can combine any of these options:\n\n`ember build -wc --out-file public/whatever.js`\n\n### Scaffolding\n\nI am not super proud of the scaffolding, but it gets your feet wet with\nember really quickly, so use it for fun, not profit :P\n\n`ember generate --scaffold time_sheet description:string minutes:number`\n\n### Generators\n\nEmber tools provides generators for the different ember objects your app\nwill use. Basic usage is:\n\n`ember generate [options] [name]`\n\nSo creating a recipe route would look like:\n\n`ember generate --route recipe`\n\nOr the shorter version:\n\n`ember generate -r recipe`\n\nIf you have a route, you probably want a template too; you can combine\ngenerator options:\n\n`ember generate -rt recipe`\n\nBelow is a list of all generator commands the the files and objects they\ncreate.\n\n### Generator Examples\n\n| options | object name | file |\n| --------|-------------|------|\n| `--model, -m burrito` | `Burrito` | `models/burrito.js` |\n| `--view, -v burrito` | `BurritoView` | `views/burrito_view.js` |\n| `--controller, -c post/comments` | `PostCommentsController` | `controllers/post/comments_controller.js` |\n| `--template, -t post/comments` | n/a | `templates/post/comments.handlebars` |\n| `--route, -r taco_cart` | `TacoCartRoute` | `routes/taco_cart_route.js` |\n| `--mixin, -x tacoable` | `Tacoable` | `mixins/tacoable.js` |\n| `--helper, -l all_caps` | `allCaps` | `helpers/all_caps.js` |\n| `--component, -p my-widget` | `MyWidgetComponent` | `components/my_widget_component.js` <br>`templates/components/my-widget.hbs` |\n| `-mvcrt tacos` | `Taco` <br>`TacosView` <br>`TacosController` <br>`TacosRoute` | `models/taco.js` <br>`views/tacos_view` <br>`controllers/tacos_controller.js` <br>`routes/taco_route.js` <br>`templates/tacos.handlebars`|\n\n_Notes:_\n\n- Models will always be singular.\n- Sub-directories will be created for you if they don't exist.\n- Components must have a dash per web component standards.\n\n### Precompiling Handlebars Templates for Ember\n\nThe build command already pre-compiles your templates, but you can use\nthe precompile command outside of the rest of ember-tools. To precompile\na bunch of templates found at `views/jst` to\n`assets/javascripts/templates.js` run this command:\n\n`ember precompile -d views/jst -f assets/javascripts/templates.js`\n\nThis will register each template on `Ember.TEMPLATES` with file paths\nfor keys.\n\n## Upgrading from 0.1.x to 0.2.x\n\n1. Rename `.ember` to `ember.json`\n2. Edit `ember.json` to point to the right `jsPath`, should look\n   something like:\n    ```js\n    {\n      \"jsPath\": \"js\",\n      \"modules\": \"cjs\"\n    }\n    ```\n3. Move `routes.js`, `app.js`, and `store.js` to `config/<filename>.js`\n4. Add dependencies to `config/app.js`, it should look something like this:\n   ```js\n   require('../vendor/jquery');\n   require('../vendor/handlebars');\n   require('../vendor/ember');\n   require('../vendor/ember-data');\n\n   var App = Ember.Application.create();\n   App.Store = require('./store');\n\n   module.exports = App;\n   ```\n\nThat should do it.\n\n## License and Copyright\n\n[MIT Style License](http://opensource.org/licenses/MIT)\n\nCopyright &copy; 2013 [Ryan Florence](http://ryanflorence.com)\n\n## Contributing\n\nRun tests with:\n\n`npm test`\n\nand the browser sanity tests:\n\n`npm run-script browser`\n\nIts usually easiest to create a branch and send a pull request against that branch instead of master. Single commits are preferred (no big deal though, I can squash and cherry-pick).\n\nThanks for using ember-tools!\n\n",
  "readmeFilename": "README.md",
  "description": "Ember Tools -----------",
  "_id": "ember-tools@0.2.8",
  "_from": "ember-tools@*"
}
